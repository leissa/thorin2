// RUN: rm -f %t.ll
// RUN: %thorin %s --output-ll %t.ll -o -

.plugin core;
.plugin mem;
.plugin memoir;

// a + b * c

.cfun dont_know[mem: %mem.M]: [%mem.M, .Bool];

.let KV = (.I32, .I64);

.let Assoc = [
    Assoc:  [*, *] -> *,
    assoc:  Π [K V: *][n: .Nat][«n; [K, V]»] -> Assoc (K, V),
    read:   Π.[K V: *][Assoc (K, V), K] -> V,
    write:  Π.[K V: *][Assoc (K, V), K, V] -> Assoc (K, V),
    has:    Π.[K V: *][Assoc (K, V), K] -> .Bool,
    size:   Π.[K V: *][Assoc (K, V)] -> .Nat,
    keys:   Π.[K V: *][a: Assoc (K, V)] -> «size a; V»,
];

.fun poly(a: Assoc)(mem: %mem.M, x: .I64): [%mem.M, .I64] =
    // stack-alloc dictionary and init with: 0 -> 23, 1 -> x
    .let (`mem, ptr) = %mem.slot (a#Assoc KV, 0) (mem, 0);
    .let `mem        = %mem.store (mem, ptr, a#assoc KV 2 ((0I32, 23I64), (1I32, x)));
    head mem
    .where
        .con head(mem: %mem.M) =
            .ret (`mem, cond) = dont_know $ mem;
            (exit, body)#cond mem
            .where
                .con body(mem: %mem.M) =
                    .let (`mem, `assoc) = %mem.load (mem, ptr);
                    .let `assoc         = a#write (assoc, 1I32, 42I64); // 1 -> 42
                    .let `mem           = %mem.store (mem, ptr, assoc);
                    .let cond           = a#has (assoc, 1I32);
                    (false, true)#cond mem
                    .where
                        .con true (mem: %mem.M) =
                            .let (`mem, `assoc) = %mem.load (mem, ptr);
                            .let `assoc         = a#write (assoc, 1I32, x); // 1 -> x
                            .let `mem           = %mem.store (mem, ptr, assoc);
                            next mem;
                        .con false(mem: %mem.M) = next mem;
                        .con next (mem: %mem.M) = head mem;
                    .end;
                .con exit(mem: %mem.M) =
                    .let (`mem, `assoc) = %mem.load (mem, ptr);
                    .let val            = a#read (assoc, 1I32);
                    return (mem, val);
            .end
    .end;


.let assoc = (%memoir.Assoc, %memoir.assoc, %memoir.read, %memoir.write, %memoir.has, %memoir.size, %memoir.keys);

// I can't have a polymorphic function as extern at the moment, so I instantiate here:
.fun .extern f(mem: %mem.M, x: .I64): [%mem.M, .I64] = poly assoc ((mem, x), return);
